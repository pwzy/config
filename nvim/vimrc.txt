" for f in split(glob('~/.config/nvim/rc/*.vim'), '\n')
"     exe 'source' f
" endfor
"

" >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
" 插件设置
call plug#begin('~/.local/share/nvim/plugged')

" 安装主题
Plug 'joshdick/onedark.vim'
" 增强 Vim 的书签(标记)跳转功能
Plug 'kshenoy/vim-signature'
" 模糊搜索
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
" 状态栏增强显示
Plug 'bling/vim-airline'
" 状态栏主题
Plug 'vim-airline/vim-airline-themes'
" 快速移动
Plug 'Lokaltog/vim-easymotion'
" 多光标操作
Plug 'terryma/vim-multiple-cursors'
" Vim启动界面
Plug 'mhinz/vim-startify'
" 快速选择相领的对象
Plug 'vim-scripts/wildfire.vim'
" 更改成对符号
Plug 'tpope/vim-surround'
" 批量注释与反注释
Plug 'scrooloose/nerdcommenter'
" 大纲式导航
Plug 'majutsushi/tagbar'
" 高亮单词
Plug 'lfv89/vim-interestingwords'
" 强大插件
Plug 'neoclide/coc.nvim', {'branch': 'release'}
" 安装中文帮助文档
Plug 'yianwillis/vimcdoc'
" latex 插件
Plug 'lervag/vimtex'
" 配色表
Plug 'guns/xterm-color-table.vim'
" 按键提示插件
Plug 'liuchengxu/vim-which-key'

call plug#end()
" <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

set nu
" 去掉vi兼容性
set nocompatible 
" 设置退格正常工作
set backspace=indent,eol,start
" 设置高亮
set hlsearch
" 设置忽略大小写
set ignorecase
" 设置增量搜索，实时高亮
set incsearch
" 右下角显示标尺
set ruler 
" 输入的命令显示出来，看的清楚些
set showcmd 
" 高亮显示匹配的括号
set showmatch
" 匹配括号高亮的时间（单位是十分之一秒）
set matchtime=1
" 光标移动到buffer的顶部和底部时保持3行距离
set scrolloff=3
" 可以在buffer的任何地方使用鼠标（类似office中在工作区双击鼠标定位）
set mouse=a
" 设置按键响应 使用系统剪切板，内容存到匿名寄存器
set clipboard=unnamed
" 设置前缀
let mapleader="\<Space>"
let maplocalleader=","
" 映射保存文件
nnoremap <leader>ss :w<CR>



"###################################################################################
"插件设置
"###################################################################################
"
"#####################
"##    onedark   #####
"#####################
"
colorscheme onedark

"#####################
"##vim-airline-themes#
"#####################
"
let g:airline_theme='molokai'

"#####################
"##    fzf       #####
"#####################

nnoremap <silent> <leader>sf :Files<CR>
nnoremap <silent> <leader>sb :Buffers<CR>

"#####################
"##   coc.nvim   #####
"#####################

" " ===   安装常用的coc插件
" " === coc.nvim
" " ===
" 如果然出现 Jedi error: Cannot call write after a stream was destroyed #1496
" 运行:   CocCommand python.setInterpreter  即可
" vim(coc.nvim)报错`Linter pylint is not installed.`
" :CocCommand python.setInterpreter 选择python版本即可
let g:coc_global_extensions = [
    \ 'coc-explorer',
    \ 'coc-json',
    \ 'coc-pyright',
    \ 'coc-jedi',
    \ 'coc-yank',
    \ 'coc-lists',
    \ 'coc-snippets',
    \ 'coc-prettier',
    \ 'coc-tasks',
    \ 'coc-todolist',
    \ 'coc-translator',
    \ 'coc-tsserver',
    \ 'coc-tslint-plugin',
    \ 'coc-diagnostic',
    \ 'coc-vimlsp',
    \ 'coc-clangd',
    \ 'coc-cmake',
    \ ]
"   'coc-python' 安装需要 pip install jedi>=0.17
" 设置文件未保存coc插件跳转时不报错
set hidden

" Some servers have issues with backup files, see #649. 设置不备份文件
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" 激活使用TAB来进行补全信息的切换
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion. 激活使用TAB来进行补全信息的切换
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.  进行错误信息的跳转
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocActionAsync('doHover')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> ,a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> ,e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> ,c  :<C-u>CocList commands<cr>
" Find symbol of current d,.
nnoremap <silent><nowait> ,o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent><nowait> ,s  :<C-u>CocList -I symbols<cr>
" Do default action for ne,.
nnoremap <silent><nowait> ,j  :<C-u>CocNext<CR>
" Do default action for pr,item.
nnoremap <silent><nowait> ,k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> ,p  :<C-u>CocListResume<CR>


" adding setting for explorer
nmap <space>e :CocCommand explorer<CR>
nmap <space>f :CocCommand explorer --preset floating<CR>
autocmd BufEnter * if (winnr("$") == 1 && &filetype == 'coc-explorer') | q | endif
